#include "TestingUtility.h"

#include "pica/Formfactor.h"

using namespace pica;


TEST(FormfactorTest, TSC) {
    FP values[][2] = {
        {-1.5, 0.0}, {-1.4, 0.005}, {-1.3, 0.02}, {-1.2, 0.045}, {-1.1, 0.08},
        {-1.0, 0.125}, {-0.9, 0.18}, {-0.8, 0.245}, {-0.7, 0.32}, {-0.6, 0.405},
        {-0.5, 0.5}, {-0.4, 0.59}, {-0.3, 0.66}, {-0.2, 0.71}, {-0.1, 0.74}, {0.0, 0.75}
    };
    FP maxAbsoluteError = (FP)1e-14;
    FP maxRelativeError = (FP)1e-12;
    for (int i = 0; i < sizeof(values) / sizeof(*values); i++) {
        ASSERT_NEAR_FP(values[i][1], formfactorTSC(values[i][0]));
        ASSERT_NEAR_FP(values[i][1], formfactorTSC(-values[i][0]));
    }
}

TEST(FormfactorTest, PCS) {
    FP values[][2] = {
        {-2.0, 0.0}, {-1.9, 0.000166666666667}, {-1.8, 0.00133333333333},
        {-1.7, 0.0045}, {-1.6, 0.0106666666667}, {-1.5, 0.0208333333333},
        {-1.4, 0.036}, {-1.3, 0.0571666666667}, {-1.2, 0.0853333333333},
        {-1.1, 0.1215}, {-1.0, 0.166666666667}, {-0.9, 0.221166666667},
        {-0.8, 0.282666666667}, {-0.7, 0.348166666667}, {-0.6, 0.414666666667},
        {-0.5, 0.479166666667}, {-0.4, 0.538666666667}, {-0.3, 0.590166666667},
        {-0.2, 0.630666666667}, {-0.1, 0.657166666667}, {0.0, 0.666666666667}
    };
    FP maxAbsoluteError = (FP)1e-11;
    FP maxRelativeError = (FP)1e-11;
    for (int i = 0; i < sizeof(values) / sizeof(*values); i++) {
        ASSERT_NEAR_FP(values[i][1], formfactorPCS(values[i][0]));
        ASSERT_NEAR_FP(values[i][1], formfactorPCS(-values[i][0]));
    }
}

TEST(FormfactorTest, FourthOrder) {
    FP inputs[] = {-1.0, -0.9, -0.8, -0.7, -0.6, -0.5, -0.4, -0.3, -0.2, -0.1,
        0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0};
    FP expectedResults[][5] = {
        {0, 1, 0, 0, 0},
        {-0.02066249999999999, 0.9091499999999999, 0.151525, -0.04785, 0.007837499999999999},
        {-0.0336, 0.8064, 0.3023999999999999, -0.08959999999999997, 0.0144},
        {-0.04016250000000001, 0.6961499999999999, 0.4475250000000001, -0.12285, 0.0193375},
        {-0.04160000000000001, 0.5824, 0.5823999999999999, -0.1456, 0.0224},
        {-0.0390625, 0.46875, 0.703125, -0.15625, 0.0234375},
        {-0.0336, 0.3584000000000001, 0.8063999999999999, -0.1536, 0.0224},
        {-0.0261625, 0.25415, 0.8895249999999999, -0.13685, 0.0193375},
        {-0.01760000000000001, 0.1584, 0.9504000000000001, -0.1056, 0.0144},
        {-0.008662500000000002, 0.07315000000000001, 0.9875250000000001, -0.05985000000000001, 0.007837500000000001},
        {0, -0, 1, 0, -0},
        {0.007837500000000001, -0.05985000000000001, 0.9875250000000002, 0.07315000000000002, -0.008662500000000002},
        {0.0144, -0.1056, 0.9504, 0.1584, -0.0176},
        {0.0193375, -0.13685, 0.8895249999999998, 0.2541499999999999, -0.0261625},
        {0.0224, -0.1536, 0.8064, 0.3584000000000001, -0.0336},
        {0.0234375, -0.15625, 0.703125, 0.46875, -0.0390625},
        {0.0224, -0.1456, 0.5824, 0.5823999999999999, -0.04160000000000001},
        {0.0193375, -0.12285, 0.4475250000000001, 0.6961499999999999, -0.0401625},
        {0.0144, -0.08959999999999996, 0.3024, 0.8064, -0.03359999999999999},
        {0.007837499999999999, -0.04785, 0.151525, 0.90915, -0.02066249999999999},
        {-0, 0, -0, 1, 0}
    };
    FP maxAbsoluteError = (FP)1e-11;
    FP maxRelativeError = (FP)1e-11;
    for (int i = 0; i < sizeof(inputs) / sizeof(*inputs); i++) {
        FP result[5];
        formfactorFourthOrder(inputs[i], result);
        ASSERT_NEAR_FP(expectedResults[i][0], result[0]);
        ASSERT_NEAR_FP(expectedResults[i][1], result[1]);
        ASSERT_NEAR_FP(expectedResults[i][2], result[2]);
        ASSERT_NEAR_FP(expectedResults[i][3], result[3]);
        ASSERT_NEAR_FP(expectedResults[i][4], result[4]);
    }
}

TEST(FormfactorTest, Esirkepov) {
    FP3 inputCoords[] = {
        FP3(0.0, 0.0, 0.0), FP3(0.0, 0.0, 0.3), FP3(0.0, 0.9, 0.0), FP3(0.5, 0.0, 0.0),
        FP3(0.0, 0.8, 0.1), FP3(0.2, 0.0, 0.6), FP3(0.4, 0.3, 0.0), FP3(0.8, 0.1, 0.3),
        FP3(0.4, 0.8, 0.8), FP3(1.0, 0.0, 0.3), FP3(0.0, 1.0, 0.5), FP3(0.5, 0.6, 1.0), 
        FP3(0.2, 1.0, 1.0), FP3(1.0, 0.5, 1.0), FP3(1.0, 1.0, 0.7), FP3(1.0, 1.0, 1.0)
    };
    Int3 inputShifts[] = {
        Int3(0, 0, 0), Int3(0, 1, 0), Int3(0, -1, -1), Int3(1, 1, 1),
        Int3(0, -1, 0), Int3(1, 0, 1), Int3(-1, -1, -1), Int3(-1, 1, -1),
        Int3(-1, 0, 0), Int3(1, 1, 1), Int3(1, -1, 1), Int3(0, -1, -1),
        Int3(0, 0, 1), Int3(-1, 1, -1), Int3(-1, -1, 1), Int3(1, 1, 1)
    };
    FP3 expectedResults[][5] = {
        {FP3(0, 0, 0), FP3(0.125, 0.125, 0.125), FP3(0.75, 0.75, 0.75), FP3(0.125, 0.125, 0.125), FP3(0, 0, 0)},
        {FP3(0, 0, 0), FP3(0.125, 0, 0.02), FP3(0.75, 0.125, 0.66), FP3(0.125, 0.75, 0.3200000000000001), FP3(0, 0.125, 0)},
        {FP3(0, 0.08000000000000002, 0.125), FP3(0.125, -0.06000000000000005, 0.75), FP3(0.75, 0.9799999999999999, 0.125), FP3(0.125, 0, 0), FP3(0, 0, 0)},
        {FP3(0, 0, 0), FP3(0, 0, 0), FP3(0, 0.125, 0.125), FP3(0.5, 0.75, 0.75), FP3(0.5, 0.125, 0.125)},
        {FP3(0, 0.04500000000000001, 0), FP3(0.125, 0.1099999999999999, 0.08000000000000002), FP3(0.75, 0.8450000000000001, 0.74), FP3(0.125, 0, 0.18), FP3(0, 0, 0)},
        {FP3(0, 0, 0), FP3(0, 0.125, 0), FP3(0.045, 0.75, 0.004999999999999998), FP3(0.71, 0.125, 0.39), FP3(0.245, 0, 0.6050000000000001)},
        {FP3(0.004999999999999998, 0.02, 0.125), FP3(0.59, 0.66, 0.75), FP3(0.405, 0.3200000000000001, 0.125), FP3(0, 0, 0), FP3(0, 0, 0)},
        {FP3(0.04500000000000001, 0, 0.02), FP3(0.1099999999999999, 0, 0.66), FP3(0.8450000000000001, 0.08000000000000002, 0.3200000000000001), FP3(0, 0.74, 0), FP3(0, 0.18, 0)},
        {FP3(0.004999999999999998, 0, 0), FP3(0.59, 0.04500000000000001, 0.04500000000000001), FP3(0.405, 0.1099999999999999, 0.1099999999999999), FP3(0, 0.8450000000000001, 0.8450000000000001), FP3(0, 0, 0)},
        {FP3(0, 0, 0), FP3(0, 0, 0), FP3(0.125, 0.125, 0.02), FP3(-0.25, 0.75, 0.66), FP3(1.125, 0.125, 0.3200000000000001)},
        {FP3(0, 0.125, 0), FP3(0, -0.25, 0), FP3(0.125, 1.125, 0), FP3(0.75, 0, 0.5), FP3(0.125, 0, 0.5)},
        {FP3(0, 0.004999999999999998, 0.125), FP3(0, 0.39, -0.25), FP3(0.5, 0.6050000000000001, 1.125), FP3(0.5, 0, 0), FP3(0, 0, 0)},
        {FP3(0, 0, 0), FP3(0.045, 0.125, 0), FP3(0.71, -0.25, 0.125), FP3(0.245, 1.125, -0.25), FP3(0, 0, 1.125)},
        {FP3(0.125, 0, 0.125), FP3(-0.25, 0, -0.25), FP3(1.125, 0, 1.125), FP3(0, 0.5, 0), FP3(0, 0.5, 0)},
        {FP3(0.125, 0.125, 0), FP3(-0.25, -0.25, 0), FP3(1.125, 1.125, 0.01999999999999999), FP3(0, 0, 0.2600000000000001), FP3(0, 0, 0.72)},
        {FP3(0, 0, 0), FP3(0, 0, 0), FP3(0.125, 0.125, 0.125), FP3(-0.25, -0.25, -0.25), FP3(1.125, 1.125, 1.125)}
    };
    FP maxAbsoluteError = (FP)1e-11;
    FP maxRelativeError = (FP)1e-11;
    for (int i = 0; i < sizeof(inputCoords) / sizeof(*inputCoords); i++)
    {
        FP3 S0[5];
        formFactorEsirkepov(inputCoords[i], S0, inputShifts[i]);
        for (int j = 0; j < 5; j++) {
            ASSERT_NEAR_FP(expectedResults[i][j].x, S0[j].x);
            ASSERT_NEAR_FP(expectedResults[i][j].y, S0[j].y);
            ASSERT_NEAR_FP(expectedResults[i][j].z, S0[j].z);
        }
    }
}

TEST(FormfactorTest, EsirkepovXY) {
    FP3 inputCoords[] = {
        FP3(0.0, 0.0, 0.1), FP3(0.0, 0.1, 0.8), FP3(0.7, 0.0, 0.9),
        FP3(0.0, 0.4, 0.2), FP3(0.5, 0.0, 0.7), FP3(0.5, 0.8, 0.3),
        FP3(0.5, 0.4, 0.3), FP3(1.0, 0.3, 0.6), FP3(0.0, 1.0, 0.4),
        FP3(0.5, 1.0, 0.4), FP3(1.0, 0.6, 0.5), FP3(1.0, 1.0, 0.1)
    };
    Int3 inputShifts[] = {
        Int3(0, 0, 0), Int3(0, -1, -1), Int3(0, 1, 1),
        Int3(0, 1, 1), Int3(-1, 0, 1), Int3(1, 1, 0),
        Int3(1, 0, -1), Int3(-1, -1, 0), Int3(-1, 1, 0),
        Int3(0, 0, 0), Int3(1, -1, -1), Int3(1, 1, -1)
    };
    FP3 expectedResults[][5] = {
        {FP3(0, 0, 0), FP3(0.125, 0.125, 0), FP3(0.75, 0.75, 0), FP3(0.125, 0.125, 0), FP3(0, 0, 0)},
        {FP3(0, 0.08000000000000002, 0), FP3(0.125, 0.74, 0), FP3(0.75, 0.18, 0), FP3(0.125, 0, 0), FP3(0, 0, 0)},
        {FP3(0, 0, 0), FP3(0.01999999999999999, 0, 0), FP3(0.2600000000000001, 0.125, 0), FP3(0.72, 0.75, 0), FP3(0, 0.125, 0)},
        {FP3(0, 0, 0), FP3(0.125, 0, 0), FP3(0.75, 0.004999999999999998, 0), FP3(0.125, 0.59, 0), FP3(0, 0.405, 0)},
        {FP3(0, 0, 0), FP3(0.5, 0.125, 0), FP3(0.5, 0.75, 0), FP3(0, 0.125, 0), FP3(0, 0, 0)},
        {FP3(0, 0, 0), FP3(0, 0, 0), FP3(0, 0.04500000000000001, 0), FP3(0.5, 0.1099999999999999, 0), FP3(0.5, 0.8450000000000001, 0)},
        {FP3(0, 0, 0), FP3(0, 0.004999999999999998, 0), FP3(0, 0.59, 0), FP3(0.5, 0.405, 0), FP3(0.5, 0, 0)},
        {FP3(0.125, 0.02, 0), FP3(-0.25, 0.66, 0), FP3(1.125, 0.3200000000000001, 0), FP3(0, 0, 0), FP3(0, 0, 0)},
        {FP3(0.125, 0, 0), FP3(0.75, 0, 0), FP3(0.125, 0.125, 0), FP3(0, -0.25, 0), FP3(0, 1.125, 0)},
        {FP3(0, 0, 0), FP3(0, 0.125, 0), FP3(0.5, -0.25, 0), FP3(0.5, 1.125, 0), FP3(0, 0, 0)},
        {FP3(0, 0.004999999999999998, 0), FP3(0, 0.39, 0), FP3(0.125, 0.6050000000000001, 0), FP3(-0.25, 0, 0), FP3(1.125, 0, 0)},
        {FP3(0, 0, 0), FP3(0, 0, 0), FP3(0.125, 0.125, 0), FP3(-0.25, -0.25, 0), FP3(1.125, 1.125, 0)}
    };
    FP maxAbsoluteError = (FP)1e-11;
    FP maxRelativeError = (FP)1e-11;
    for (int i = 0; i < sizeof(inputCoords) / sizeof(*inputCoords); i++)
    {
        FP3 S0[5];
        formFactorEsirkepovXY(inputCoords[i], S0, inputShifts[i]);
        for (int j = 0; j < 5; j++) {
            ASSERT_NEAR_FP(expectedResults[i][j].x, S0[j].x);
            ASSERT_NEAR_FP(expectedResults[i][j].y, S0[j].y);
            ASSERT_NEAR_FP(expectedResults[i][j].z, S0[j].z);
        }
    }
}
